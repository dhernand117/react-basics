{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCHdC,EAAW,SAACR,GACrB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,U,MCJtB,SAASM,EAAT,GAAkD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aACrC,OACE,8BACE,uBACEZ,UAAU,YACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,M,UCNCG,E,kDACnB,aAAc,IAAD,8BACX,gBAeFH,aAAc,SAACI,GACX,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACbb,SAAU,GACVU,YAAa,IAJJ,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WAAS,MAI2BC,KAAKN,MAA/Bb,EAJD,EAICA,SAAUU,EAJX,EAIWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAK9B,UAAU,MAAf,UACA,kDACE,cAACU,EAAD,CAAWC,YAAY,kBACvBC,aAAce,KAAKf,eACnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCKI,aCOlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b38aafa5.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h1>{props.monster.name}</h1>\r\n        <h2>{props.monster.email}</h2>\r\n    </div>\r\n)\r\n","import React from 'react'\r\nimport './card-list.styles.css';\r\nimport { Card } from \"../card/card\";\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n      <div className=\"card-list\">\r\n        {props.monsters.map((monster) => (\r\n          <Card key={monster.id} monster={monster} />\r\n        ))}\r\n      </div>\r\n    );\r\n}","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\n\r\nexport function SearchBox({ placeholder, handleChange}) {\r\n    return (\r\n      <div>\r\n        <input\r\n          className=\"searchBox\"\r\n          type=\"search\"\r\n          placeholder={placeholder}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react'\nimport { CardList } from \"./components/card-list/card-list\";\nimport { SearchBox } from \"./components/search/search-box.jsx\"\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(){\n    super();\n      this.state = {\n      monsters: [],\n      searchField: ''\n    };\n    //Way of how \"this\" have to be binded to the method if not using arrow functions\n   // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange =(e) => {\n      this.setState({ searchField: e.target.value });\n   }\n\n  render() {\n    //* This way of destructure is equal to use:\n    //* const monsters = this.state.monsters;\n    //* const searchField = this.state.searchField;\n    const { monsters, searchField } = this.state; \n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    return (\n      <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters'\n        handleChange={this.handleChange}  />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}